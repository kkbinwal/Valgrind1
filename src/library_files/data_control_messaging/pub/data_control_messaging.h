/* Copyright (C) logi.cals GmbH. All rights reserved. */
/* AUTOGENERATED FILE - DO NOT EDIT MANUALLY */
#ifndef DATA_CONTROL_MESSAGING_H_
#define DATA_CONTROL_MESSAGING_H_

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <common_types.h>

/** @defgroup DCM Data Control Messaging
 *
 * @brief Data Control Messaging
 *
 *@{*/

#define DCM_API_VERSION_MAJOR 0
#define DCM_API_VERSION_MINOR 24
#define DCM_API_VERSION_PATCH 1
#define DCM_API_VERSION_INFO "SNAPSHOT"
#define DCM_MESSAGE_HEADER_LENGTH 14
#define DCM_MESSAGE_MAX_ARRAY_LENGTH 255
#define DCM_MESSAGE_MAX_PAYLOAD_LENGTH 800

/* WARNING: All numeric defines will be changed before the first release! */
#define DCM_MESSAGE_ID_STATUS 1
#define DCM_MESSAGE_ID_HELLO 2
#define DCM_MESSAGE_ID_LOGIN 3
#define DCM_MESSAGE_ID_DEVICEINFO 4
#define DCM_MESSAGE_ID_STATE 5
#define DCM_MESSAGE_ID_STOP_TEST 6
#define DCM_MESSAGE_ID_STOP_SAFE 7
#define DCM_MESSAGE_ID_RUN_TEST 8
#define DCM_MESSAGE_ID_RUN_SAFE 9
#define DCM_MESSAGE_ID_HOLD 10
#define DCM_MESSAGE_ID_VERIFY 11
#define DCM_MESSAGE_ID_RELEASE 12
#define DCM_MESSAGE_ID_ENABLE_INPUT 13
#define DCM_MESSAGE_ID_DISABLE_INPUT 14
#define DCM_MESSAGE_ID_ADDED 15
#define DCM_MESSAGE_ID_CLEAR_APPLICATION_MODEL 16
#define DCM_MESSAGE_ID_ADD_BLOCK 17
#define DCM_MESSAGE_ID_MODIFY_BLOCK 18
#define DCM_MESSAGE_ID_DELETE_BLOCK 19
#define DCM_MESSAGE_ID_ADD_CONNECTION 20
#define DCM_MESSAGE_ID_MODIFY_CONNECTION 21
#define DCM_MESSAGE_ID_DELETE_CONNECTION 22
#define DCM_MESSAGE_ID_ADD_COMMENT 23
#define DCM_MESSAGE_ID_MODIFY_COMMENT 24
#define DCM_MESSAGE_ID_DELETE_COMMENT 25
#define DCM_MESSAGE_ID_ADD_VARIABLE 26
#define DCM_MESSAGE_ID_MODIFY_VARIABLE 27
#define DCM_MESSAGE_ID_DELETE_VARIABLE 28
#define DCM_MESSAGE_ID_GET_MODEL 29
#define DCM_MESSAGE_ID_MODEL_BLOCK 30
#define DCM_MESSAGE_ID_MODEL_CONNECTION 31
#define DCM_MESSAGE_ID_MODEL_COMMENT 32
#define DCM_MESSAGE_ID_MODEL_VARIABLE 33
#define DCM_MESSAGE_ID_GET_DRAWING_INSTRUCTION 34
#define DCM_MESSAGE_ID_DRAWING_INSTRUCTION_EMPTY 35
#define DCM_MESSAGE_ID_DRAWING_INSTRUCTION_BLOCK_SIMPLE 36
#define DCM_MESSAGE_ID_DRAWING_INSTRUCTION_BLOCK_FUNCTION_BLOCK 37
#define DCM_MESSAGE_ID_DRAWING_INSTRUCTION_PIN 38
#define DCM_MESSAGE_ID_DRAWING_INSTRUCTION_LINE 39
#define DCM_MESSAGE_ID_DRAWING_INSTRUCTION_COMMENT 40
#define DCM_MESSAGE_ID_ENABLE_WATCH 41
#define DCM_MESSAGE_ID_DISABLE_WATCH 42
#define DCM_MESSAGE_ID_WATCH 43
#define DCM_MESSAGE_ID_FORCE 44
#define DCM_MESSAGE_ID_GET_HARDWARE_CONFIG 45
#define DCM_MESSAGE_ID_HARDWARE_CONFIG 46
#define DCM_MESSAGE_ID_VERIFY_HARDWARE_CONFIG 47
#define DCM_MESSAGE_ID_GET_HARDWARE_IO 48
#define DCM_MESSAGE_ID_HARDWARE_IO 49
#define DCM_MESSAGE_ID_GET_LIBRARY 50
#define DCM_MESSAGE_ID_LIBRARY_ITEM 51
#define DCM_MESSAGE_ID_LIBRARY_ITEM_PIN 52
#define DCM_MESSAGE_ID_GET_ERROR_LOG 53
#define DCM_MESSAGE_ID_ERROR_LOG 54
#define DCM_MESSAGE_ID_CLEAR_ERROR_LOG 55
#define DCM_MESSAGE_ID_GET_AUDIT_LOG 56
#define DCM_MESSAGE_ID_AUDIT_LOG 57
#define DCM_MESSAGE_ID_CLEAR_AUDIT_LOG 58
#define DCM_MESSAGE_ID_SET_PIL_TEST 59
#define DCM_MESSAGE_ID_RESET_PIL_TEST 60
#define DCM_MESSAGE_ID_PREPARE_PIL_TEST 61
#define DCM_MESSAGE_ID_NUM_PIL_TEST_STEPS 62
#define DCM_MESSAGE_ID_INIT_PIL_TEST 63
#define DCM_MESSAGE_ID_SET_PIL_TEST_CYCLE_TIME 64
#define DCM_MESSAGE_ID_GET_PIL_TEST_VAR_DESCRIPTORS 65
#define DCM_MESSAGE_ID_PIL_TEST_VAR_DESCRIPTORS 66
#define DCM_MESSAGE_ID_FORCE_PIL_TEST_VARIABLES 67
#define DCM_MESSAGE_ID_WATCH_PIL_TEST_VARIABLES 68
#define DCM_MESSAGE_ID_PIL_TEST_VARIABLES 69
#define DCM_MESSAGE_ID_ACTIVATE_PIL_TEST 70
#define DCM_MESSAGE_ID_PREPARE_CODE_IMAGE_UPLOAD 71
#define DCM_MESSAGE_ID_DOWNLOAD_DATA 72
#define DCM_MESSAGE_ID_GET_TIMER_FREQUENCY 73
#define DCM_MESSAGE_ID_TIMER_FREQUENCY 74
#define DCM_MESSAGE_ID_ENABLE_OUTPUT 75
#define DCM_MESSAGE_ID_DISABLE_OUTPUT 76
#define DCM_MESSAGE_ID_VERIFIED 77
#define DCM_MESSAGE_ID_RELEASED 78
#define DCM_MESSAGE_ID_SET_OPERATION_MODE 79
#define DCM_MESSAGE_ID_OPERATION_MODE 80
#define DCM_MESSAGE_ID_GET_LIBRARY_FINGERPRINT 81
#define DCM_MESSAGE_ID_LIBRARY_FINGERPRINT 82
#define DCM_MESSAGE_ID_SAVE_APM_TO_PLC 83
#define DCM_MESSAGE_ID_VERSION 84
#define DCM_MESSAGE_ID_GET_VERSION 85
#define DCM_MESSAGE_ID_EXEC_SINGLE_CYCLE 86
#define DCM_MESSAGE_ID_SET_INIT_VALUE 87
#define DCM_MESSAGE_ID_GET_INIT_VALUE 88
#define DCM_MESSAGE_ID_INIT_VALUE 89
#define DCM_MESSAGE_ID_EXEC_BLOCK_STEP 90
#define DCM_MESSAGE_ID_CURRENT_BREAKPOINT_BLOCK 91
#define DCM_MESSAGE_ID_GET_EXECUTION_ORDER 92
#define DCM_MESSAGE_ID_EXECUTION_ORDER_ENTRY 93
#define DCM_MESSAGE_ID_DOWNLOAD_APPLICATION_CONFIG 94
#define DCM_MESSAGE_ID_UPLOAD_APPLICATION_CONFIG 95
#define DCM_MESSAGE_ID_UPLOAD_HARDWAR_CONFIG 96

#define DCM_STATUS_CODE_OK 0
#define DCM_STATUS_CODE_ERROR 1
#define DCM_STATUS_CODE_EHEADER 2 /* Message length is shorter than header length */
#define DCM_STATUS_CODE_EUNKNOWN_MESSAGE 3 /* Message ID is not known */
#define DCM_STATUS_CODE_EVERIFY_MESSAGE 4 /* Internal message verification error */
#define DCM_STATUS_CODE_EBLOCK_NOT_FOUND_IN_LIBRARY 5 /* Requested function block is not contained in library */

typedef enum {
  DCM_DataDirectionIn = 1,
  DCM_DataDirectionOut = 2
} DCM_DataDirection;

/**
 * Connection.
 */
typedef struct {
  void* context; /**< pointer to context */
  void* streamHandle; /**< handle to an opened stream */
  uint16_t lastMessageType; /**< type of last message */
} DCM_Connection;

/**
 * Request
 */
typedef struct {
  uint16_t deviceId; /**< id of device */
  uint64_t timestamp; /**< start of request */
  uint16_t messageType; /**< type of mesage */
  uint16_t requestId; /**< id of request */
} DCM_Request;

/**
 * String (UTF-8 encoded).
 */
typedef struct {
  uint8_t length; /**< length of the string */
  char const* data; /**< actual data */
} DCM_String;

/**
 * Int16Array.
 */
typedef struct {
  uint8_t length; /**< number of items */
  union {
    int16_t const* write; /**< items to use during write */
    void const* read; /**< item when read from a message */
  } data;
} DCM_Int16Array;

void DCM_readUint8(uint8_t* aOut, uint8_t const** aPtr);
void DCM_writeUint8(uint8_t** aPtr, uint8_t aValue);
void DCM_readUint16(uint16_t* aOut, uint8_t const** aPtr);
void DCM_writeUint16(uint8_t** aPtr, uint16_t aValue);
void DCM_readUint32(uint32_t* aOut, uint8_t const** aPtr);
void DCM_writeUint32(uint8_t** aPtr, uint32_t aValue);
void DCM_readUint64(uint64_t* aOut, uint8_t const** aPtr);
void DCM_writeUint64(uint8_t** aPtr, uint64_t aValue);
void DCM_readInt8(int8_t* aOut, uint8_t const** aPtr);
void DCM_writeInt8(uint8_t** aPtr, int8_t aValue);
void DCM_readInt16(int16_t* aOut, uint8_t const** aPtr);
void DCM_writeInt16(uint8_t** aPtr, int16_t aValue);
void DCM_readInt32(int32_t* aOut, uint8_t const** aPtr);
void DCM_writeInt32(uint8_t** aPtr, int32_t aValue);
void DCM_readInt64(int64_t* aOut, uint8_t const** aPtr);
void DCM_writeInt64(uint8_t** aPtr, int64_t aValue);
void DCM_readBool(uint8_t* aOut, uint8_t const** aPtr);
void DCM_writeBool(uint8_t** aPtr, uint8_t aValue);
void DCM_readSafeBool(uint8_t* aOut, uint8_t const** aPtr);
void DCM_writeSafeBool(uint8_t** aPtr, uint8_t aValue);
void DCM_readFloat(CMN_Real32* aOut, uint8_t const** aPtr);
void DCM_writeFloat(uint8_t** aPtr, CMN_Real32 aValue);
void DCM_readDouble(CMN_Real64* aOut, uint8_t const** aPtr);
void DCM_writeDouble(uint8_t** aPtr, CMN_Real64 aValue);

/**
 * Position message.
 */
typedef struct {
  uint16_t x; /**< x coordinate */
  uint16_t y; /**< y coordinate */
} DCM_Position;

/**
 * Token message.
 */
typedef struct {
  DCM_String data; /**< unique data */
  uint32_t validTo; /**< expire timestamp */
} DCM_Token;

/**
 * InterfaceBlock message.
 */
typedef struct {
  uint8_t blockType; /**< type of the block. @see #CMN_BlockType. */
  uint8_t dataType; /**< datatype of the block. @see #CMN_DataType. */
  DCM_String name; /**< name of the block. Variable: Name of the variable to identify it.
   (Instance path including namespace)
   Literal: Literal value string.
   Function Block: Name of the block in library. (Instance path including namespace)
   Input, Output: Name of the IO resource in system IO configuration. */
  DCM_Position position; /**< Position of upper left corner of block in web editor drawing canvas */
  uint16_t width; /**< Width of block in web editor drawing canvas */
  uint16_t height; /**< Height of block in web editor drawing canvas */
} DCM_InterfaceBlock;

/**
 * InterfaceConnection message.
 */
typedef struct {
  int16_t inputBlockHandle; /**< Handle of the destination block of the connection */
  uint8_t inputBlockPin; /**< Pin number of the destination blockinput pin */
  DCM_String inputBlockPinName; /**< If the destination block is a function block:
   the library pin name of the destination block pin.
   otherwise: an empty string */
  int16_t outputBlockHandle; /**< Handle of the source block of the connection */
  uint8_t outputBlockPin; /**< Pin number of the source block */
  DCM_String outputBlockPinName; /**< If the source block is a function block:
   library pin name of the source block pin.
   otherwise: an empty string */
  DCM_Int16Array lineLengths; /**< Array of lengths of the segments.
   Alternating x and y. (x1,y1,x2,...)
   The last two segments (y and x - connection to destination block pin) are not transmitted. */
} DCM_InterfaceConnection;

/**
 * InterfaceComment message.
 */
typedef struct {
  DCM_String text; /**< actual comment text */
  DCM_Position position; /**< Position of comment in web editor drawing canvas */
  uint16_t width; /**< Width of comment in web editor drawing canvas */
  uint16_t height; /**< Height of comment in web editor drawing canvas */
} DCM_InterfaceComment;

/**
 * InterfaceVariable message.
 */
typedef struct {
  uint8_t dataType; /**< datatyp of the variable. @see #CMN_DataType. */
  DCM_String name; /**< name of the variable */
  DCM_String initalValue; /**< inital value of the variable */
} DCM_InterfaceVariable;

/**
 * VarDesc message.
 */
typedef struct {
  int16_t variableHandle; /**< variable handle */
  uint8_t dataType; /**< data type. @see #CMN_DataType. */
  uint16_t variableSize; /**< serialized size of variable value in bytes */
} DCM_VarDesc;

/**
 * VarArraySegmentDesc message.
 */
typedef struct {
  DCM_VarDesc varDesc; /**< variable descriptor */
  uint32_t startIndex; /**< start index of values in this message */
  uint32_t numElements; /**< number of values in this message */
} DCM_VarArraySegmentDesc;

typedef struct {
  uint8_t length; /**< number of items */
  DCM_DataDirection direction;
  DCM_String const* write; /**< items to use during write */
  void const* read; /**< item when read from a message */
} DCM_StringArray;

typedef struct {
  uint8_t length; /**< number of items */
  DCM_DataDirection direction;
  DCM_VarDesc const* write; /**< items to use during write */
  void const* read; /**< item when read from a message */
} DCM_VarDescArray;

typedef struct {
  /* data of the type and number described in the 'VarArraySegmentDesc' */
  void const* data;
} DCM_VarValueArray;

/**
 * Status message.
 */
typedef struct {
  uint32_t code; /**< status code of the request */
} DCM_MessageStatus;

/**
 * Hello message.
 */
typedef struct {
  uint16_t protocolVersion; /**< always 0, reserved for later use */
  uint16_t maximumMessageSize; /**< maximum size of a single message chunk */
  DCM_String gatewayDescription; /**< description of the Web Gateway */
  DCM_String serverNonce; /**< cryptographic secure random string generated by Web Gateway */
} DCM_MessageHello;

/**
 * Login message.
 */
typedef struct {
  DCM_String username; /**< username of the user, who want to sign on */
  DCM_String clientNonce; /**< a cryptographic secure random string generated by the Web Client */
  DCM_String credentialsHash; /**< hash of the password in combination with the username and nonces */
} DCM_MessageLogin;

/**
 * Deviceinfo message.
 */
typedef struct {
  uint16_t deviceId; /**< id of the device */
  DCM_String description; /**< description of the device */
  DCM_String rights; /**< list of strings concatenated with a space character */
} DCM_MessageDeviceinfo;

/**
 * State message.
 */
typedef struct {
  uint8_t executionState; /**< execution state, 0=StoppedError, 1=RunningSafe, 2=RunningTest, 3=StoppedSafe, 4=StoppedTest, 5=HeldTest, 6=StoppedEdit */
  uint8_t applicationState; /**< application state, 0=Error, 1=NotVerified, 2=Verified, 3=Released */
  uint8_t ioState; /**< io connection state, 0=Error, 1=HW IOs disconnected, 3=Input connected, 5=Output connected, 7=In+Output connected */
  uint8_t watchMode; /**< 0=Disabled, 1=Enabled */
} DCM_MessageState;

/**
 * Verify message.
 */
typedef struct {
  DCM_Token token; /**< unique token (only set during confirm) */
} DCM_MessageVerify;

/**
 * Release message.
 */
typedef struct {
  DCM_Token token; /**< unique token (only set during confirm) */
} DCM_MessageRelease;

/**
 * Added message.
 */
typedef struct {
  int16_t handle; /**< identifier of the newly added element */
} DCM_MessageAdded;

/**
 * AddBlock message.
 */
typedef struct {
  DCM_InterfaceBlock data; /**< details of the block */
} DCM_MessageAddBlock;

/**
 * ModifyBlock message.
 */
typedef struct {
  int16_t handle; /**< identifier of the block */
  DCM_InterfaceBlock data; /**< details of the block */
} DCM_MessageModifyBlock;

/**
 * DeleteBlock message.
 */
typedef struct {
  int16_t handle; /**< identifier of the block */
} DCM_MessageDeleteBlock;

/**
 * AddConnection message.
 */
typedef struct {
  DCM_InterfaceConnection data; /**< details of the connection */
} DCM_MessageAddConnection;

/**
 * ModifyConnection message.
 */
typedef struct {
  int16_t handle; /**< identifier of the connection */
  DCM_InterfaceConnection data; /**< details of the connection */
} DCM_MessageModifyConnection;

/**
 * DeleteConnection message.
 */
typedef struct {
  int16_t handle; /**< identifier of the connection */
} DCM_MessageDeleteConnection;

/**
 * AddComment message.
 */
typedef struct {
  DCM_InterfaceComment data; /**< details of the comment */
} DCM_MessageAddComment;

/**
 * ModifyComment message.
 */
typedef struct {
  int16_t handle; /**< identifier of the comment */
  DCM_InterfaceComment data; /**< details of the comment */
} DCM_MessageModifyComment;

/**
 * DeleteComment message.
 */
typedef struct {
  int16_t handle; /**< identifier of the comment */
} DCM_MessageDeleteComment;

/**
 * AddVariable message.
 */
typedef struct {
  DCM_InterfaceVariable data; /**< details of the variable */
} DCM_MessageAddVariable;

/**
 * ModifyVariable message.
 */
typedef struct {
  int16_t handle; /**< identifier of the variable */
  DCM_InterfaceVariable data; /**< details of the variable */
} DCM_MessageModifyVariable;

/**
 * DeleteVariable message.
 */
typedef struct {
  int16_t handle; /**< identifier of the variable */
} DCM_MessageDeleteVariable;

/**
 * ModelBlock message.
 */
typedef struct {
  int16_t handle; /**< identifier */
  DCM_InterfaceBlock data; /**< details of the block */
} DCM_MessageModelBlock;

/**
 * ModelConnection message.
 */
typedef struct {
  int16_t handle; /**< identifier */
  DCM_InterfaceConnection data; /**< details of the connection */
} DCM_MessageModelConnection;

/**
 * ModelComment message.
 */
typedef struct {
  int16_t handle; /**< identifier */
  DCM_InterfaceComment data; /**< details of the comment */
} DCM_MessageModelComment;

/**
 * ModelVariable message.
 */
typedef struct {
  int16_t handle; /**< identifier */
  DCM_InterfaceVariable data; /**< details of the variable */
} DCM_MessageModelVariable;

/**
 * DrawingInstructionEmpty message.
 */
typedef struct {
  uint32_t id; /**< unique identifier */
} DCM_MessageDrawingInstructionEmpty;

/**
 * DrawingInstructionBlockSimple message.
 */
typedef struct {
  uint32_t id; /**< unique identifier */
  DCM_Position from; /**< top left corner */
  DCM_Position to; /**< bottom right corner */
  uint32_t color; /**< color corresponding to data type */
  DCM_String text; /**< text for the block */
  uint8_t alignment; /**< alignment of the drawn text, 1=left, 2=right, 3=center */
} DCM_MessageDrawingInstructionBlockSimple;

/**
 * DrawingInstructionBlockFunctionBlock message.
 */
typedef struct {
  uint32_t id; /**< unique identifier */
  DCM_Position from; /**< top left corner */
  DCM_Position to; /**< bottom right corner */
  uint32_t color; /**< background color */
  DCM_String text; /**< name of the function */
} DCM_MessageDrawingInstructionBlockFunctionBlock;

/**
 * DrawingInstructionPin message.
 */
typedef struct {
  uint32_t id; /**< unique identifier */
  DCM_Position position; /**< position of the center */
  uint8_t flags; /**< bit0: input or output, bit2: connected */
  uint32_t color; /**< color corresponding to data type */
  DCM_String text; /**< name of the pin */
} DCM_MessageDrawingInstructionPin;

/**
 * DrawingInstructionLine message.
 */
typedef struct {
  uint32_t id; /**< unique identifier */
  DCM_Position from; /**< top left corner */
  DCM_Position to; /**< bottom right corner */
  uint32_t color; /**< color corresponding to data type */
} DCM_MessageDrawingInstructionLine;

/**
 * DrawingInstructionComment message.
 */
typedef struct {
  uint32_t id; /**< unique identifier */
  DCM_Position from; /**< top left corner */
  DCM_Position to; /**< bottom right corner */
  DCM_String text; /**< full text including newlines */
} DCM_MessageDrawingInstructionComment;

/**
 * Watch message.
 */
typedef struct {
  uint16_t block; /**< handle of the block */
  uint8_t pin; /**< index of the pin */
  DCM_String value; /**< display value */
} DCM_MessageWatch;

/**
 * Force message.
 */
typedef struct {
  uint16_t block; /**< handle of the block */
  uint8_t pin; /**< index of the pin */
  DCM_String value; /**< value encoded as string */
} DCM_MessageForce;

/**
 * HardwareConfig message.
 */
typedef struct {
  DCM_String text; /**< config item text */
  DCM_String verifyToken; /**< will be passsed back via Verify Hardware Config */
} DCM_MessageHardwareConfig;

/**
 * VerifyHardwareConfig message.
 */
typedef struct {
  DCM_String verifyToken; /**< from the hardwareConfig message */
} DCM_MessageVerifyHardwareConfig;

/**
 * HardwareIo message.
 */
typedef struct {
  uint8_t isOutput; /**< 0=input, 1=output */
  uint8_t dataType; /**< type of the IO. @see #CMN_DataType. */
  DCM_String group; /**< name for grouping elements */
  DCM_String name; /**< name of the IO */
  DCM_String description; /**< description of the IO */
} DCM_MessageHardwareIo;

/**
 * LibraryItem message.
 */
typedef struct {
  int16_t handle; /**< unique  */
  DCM_String group; /**< name for grouping elements */
  uint32_t backgroundColor; /**< color of the background */
  DCM_String name; /**< name of the item, identifies item in library */
  DCM_String alternativeName; /**< display text */
  uint16_t width; /**< with for drawing */
  uint16_t height; /**< height for drawing */
} DCM_MessageLibraryItem;

/**
 * LibraryItemPin message.
 */
typedef struct {
  int16_t handle; /**< same as the handle of the libraryItem message */
  uint8_t isOutput; /**< 0=input, 1=output */
  uint8_t pinIndex; /**< index of the pin, [0,.., #inputs-1, #inputs, ..., #inputs+#outputs-1] */
  uint8_t edge; /**< 0=top, 1=right, 2=bottom, 3=left */
  uint8_t index; /**< position depending on edge (display index) */
  uint8_t dataType; /**< data type. @see #CMN_DataType. */
  DCM_String name; /**< pin name, identifies pins in library (and in connections) */
  DCM_String alternativeName; /**< display text */
} DCM_MessageLibraryItemPin;

/**
 * GetErrorLog message.
 */
typedef struct {
  uint64_t fromTimestamp; /**< timestamp to get only log entries after a defined timestamp */
} DCM_MessageGetErrorLog;

/**
 * ErrorLog message.
 */
typedef struct {
  uint64_t timestamp; /**< milliseconds since 1970-01-01 */
  uint8_t logLevel; /**< level */
  DCM_String text; /**< text */
} DCM_MessageErrorLog;

/**
 * GetAuditLog message.
 */
typedef struct {
  uint64_t fromTimestamp; /**< timestamp to get only log entries after a defined timestamp */
} DCM_MessageGetAuditLog;

/**
 * AuditLog message.
 */
typedef struct {
  uint64_t timestamp; /**< milliseconds since 1970-01-01 */
  uint16_t textId; /**< numeric id of the text */
  DCM_String texts; /**< null-seperated list of texts for placeholders in the text specified via textId */
} DCM_MessageAuditLog;

/**
 * PreparePilTest message.
 */
typedef struct {
  DCM_String fbName; /**< function block under test */
} DCM_MessagePreparePilTest;

/**
 * NumPilTestSteps message.
 */
typedef struct {
  uint32_t numOfTestSteps; /**< number of possible test steps for the function block */
} DCM_MessageNumPilTestSteps;

/**
 * SetPilTestCycleTime message.
 */
typedef struct {
  uint64_t cycleTime; /**< cycle time in PIL Test */
} DCM_MessageSetPilTestCycleTime;

/**
 * GetPilTestVarDescriptors message.
 */
typedef struct {
  DCM_StringArray instancePaths; /**< instance paths of variables */
} DCM_MessageGetPilTestVarDescriptors;

/**
 * PilTestVarDescriptors message.
 */
typedef struct {
  DCM_VarDescArray varDescriptors; /**< variable descriptors for pil test */
} DCM_MessagePilTestVarDescriptors;

/**
 * ForcePilTestVariables message.
 */
typedef struct {
  DCM_VarArraySegmentDesc arraySegmentDescription; /**< description of a segment of an array of variable values */
  DCM_VarValueArray varValues; /**< variable values for pil test */
} DCM_MessageForcePilTestVariables;

/**
 * WatchPilTestVariables message.
 */
typedef struct {
  DCM_VarArraySegmentDesc arraySegmentDescription; /**< description of a segment of an array of variable values */
} DCM_MessageWatchPilTestVariables;

/**
 * PilTestVariables message.
 */
typedef struct {
  DCM_VarValueArray varValues; /**< values of watched variables */
} DCM_MessagePilTestVariables;

/**
 * ActivatePilTest message.
 */
typedef struct {
  uint32_t numTestSteps; /**< activate PIL Test with the given number of steps */
} DCM_MessageActivatePilTest;

/**
 * TimerFrequency message.
 */
typedef struct {
  uint64_t timerFrequency; /**< timer frequency in ticks per second */
} DCM_MessageTimerFrequency;

/**
 * Verified message.
 */
typedef struct {
  DCM_Token token; /**< unique token (only set when not verified) */
} DCM_MessageVerified;

/**
 * Released message.
 */
typedef struct {
  DCM_Token token; /**< unique token (only set when not released) */
  DCM_String systemConfigurationVerificationUser; /**< user who verified the systen configuration */
  uint32_t systemConfigurationVerificationTimestamp; /**< timestamp when the system configuration has been verified */
  DCM_String applicationVerificationUser; /**< user who verified the application */
  uint32_t applicationVerificationTimestamp; /**< timestamp when the application has been verified */
} DCM_MessageReleased;

/**
 * SetOperationMode message.
 */
typedef struct {
  uint8_t mode; /**< 0=Edit, 1=Test, 2=Safe */
  DCM_Token token; /**< unique token (only set during confirm) */
} DCM_MessageSetOperationMode;

/**
 * OperationMode message.
 */
typedef struct {
  uint8_t result; /**< 0=OK, 1=ConfimRequired, 2=NotSystemVerified, 3=NotVerified, 4=NotReleased */
  DCM_Token token; /**< unique token (if confirm is required) */
} DCM_MessageOperationMode;

/**
 * LibraryFingerprint message.
 */
typedef struct {
  uint32_t fingerprint; /**< fingerprint for identifying the library used by sRTS */
} DCM_MessageLibraryFingerprint;

/**
 * Version message.
 */
typedef struct {
  uint8_t dcmApiVersionMajor; /**< data control messaging API major version */
  uint8_t dcmApiVersionMinor; /**< data control messaging API minor version */
  uint8_t dcmApiVersionPatch; /**< data control messaging API patch version */
  DCM_String dcmApiVersionInfo; /**< data control messaging API info version (SNAPSHOT or RELEASE) */
  uint8_t safeRtsVersionMajor; /**< safe RTS major version */
  uint8_t safeRtsVersionMinor; /**< safe RTS minor version */
  uint8_t safeRtsVersionPatch; /**< safe RTS patch version */
  DCM_String safeRtsVersionInfo; /**< safe RTS info version (SNAPSHOT or RELEASE) */
} DCM_MessageVersion;

/**
 * SetInitValue message.
 */
typedef struct {
  DCM_String instancePath; /**< instance path of the variable. Format is libraryBlockName.outputPinName. */
  DCM_String value; /**< initial value of the library block output pin */
} DCM_MessageSetInitValue;

/**
 * GetInitValue message.
 */
typedef struct {
  DCM_String instancePath; /**< instance path of the variable. Format is libraryBlockName.outputPinName. */
} DCM_MessageGetInitValue;

/**
 * InitValue message.
 */
typedef struct {
  DCM_String value; /**< initial value of the library block output pin */
} DCM_MessageInitValue;

/**
 * CurrentBreakpointBlock message.
 */
typedef struct {
  int16_t blockHandle; /**< handle of the block that will be executed on the next execBlockStep action */
} DCM_MessageCurrentBreakpointBlock;

/**
 * ExecutionOrderEntry message.
 */
typedef struct {
  int16_t blockHandle; /**< handle of the block */
  uint16_t sequenceNumber; /**< sequenceNumber */
} DCM_MessageExecutionOrderEntry;

/**
 * Read a DCM_String from binary input.
 * aPtr is incremented to point to the position directly after the end of the string.
 * aRemainingLength is decremented by the same number of bytes.
 *
 * @param[out] aOut the parsed String
 * @param[in,out] aRemainingLength remaining length of the binary input
 * @param[in,out] aPtr pointer to the start of the String within the binary input
 * @return a status code, either DCM_STATUS_OK
 *        or DCM_STATUS_CODE_ERROR
 */
uint32_t DCM_readString(DCM_String* aOut, size_t* aRemainingLength, uint8_t const** aPtr);
void DCM_writeString(uint8_t** aPtr, DCM_String const* aValue);
void DCM_writeHeader(uint8_t** aPtr, DCM_Request const* aRequest, uint16_t aMessageType);

uint32_t DCM_readInterfaceVariable(DCM_InterfaceVariable* aOut, size_t* aRemainingLength, uint8_t const** aPtr);
uint32_t DCM_readInterfaceBlock(DCM_InterfaceBlock* aOut, size_t* aRemainingLength, uint8_t const** aPtr);
uint32_t DCM_readInterfaceConnection(DCM_InterfaceConnection* aOut, size_t* aRemainingLength, uint8_t const** aPtr);
uint32_t DCM_readInterfaceComment(DCM_InterfaceComment* aOut, size_t* aRemainingLength, uint8_t const** aPtr);
void DCM_writeInterfaceVariable(uint8_t** aPtr, DCM_InterfaceVariable const* aValue);
void DCM_writeInterfaceBlock(uint8_t** aPtr, DCM_InterfaceBlock const* aValue);
void DCM_writeInterfaceConnection(uint8_t** aPtr, DCM_InterfaceConnection const* aValue);
void DCM_writeInterfaceComment(uint8_t** aPtr, DCM_InterfaceComment const* aValue);

/**
 * Read a VarDesc from binary input.
 * aPtr is incremented to point to the position directly after the end of the VarDesc.
 *
 * @param[out] aOut the parsed VarDesc
 * @param[in,out] aPtr pointer to the start of the VarDesc within the binary input
 */
void DCM_readVarDesc(DCM_VarDesc* aOut, uint8_t const** aPtr);

/**
 * Write a VarDesc to binary output.
 * aPtr is incremented to point to the position directly after the end of the VarDesc.
 *
 * @param[in] aValue the parsed VarDesc
 * @param[in,out] aPtr pointer to the start of the VarDesc within the binary input
 */
void DCM_writeVarDesc(uint8_t** aPtr, DCM_VarDesc const* aValue);


/**
 * A Login request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageLogin(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageLogin const* aMessage);

/**
 * A StopTest request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageStopTest(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A StopSafe request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageStopSafe(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A RunTest request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageRunTest(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A RunSafe request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageRunSafe(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A Hold request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageHold(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A Verify request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageVerify(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageVerify const* aMessage);

/**
 * A Release request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageRelease(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageRelease const* aMessage);

/**
 * A EnableInput request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageEnableInput(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A DisableInput request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageDisableInput(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A ClearApplicationModel request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageClearApplicationModel(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A AddBlock request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageAddBlock(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageAddBlock const* aMessage);

/**
 * A ModifyBlock request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageModifyBlock(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageModifyBlock const* aMessage);

/**
 * A DeleteBlock request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageDeleteBlock(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageDeleteBlock const* aMessage);

/**
 * A AddConnection request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageAddConnection(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageAddConnection const* aMessage);

/**
 * A ModifyConnection request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageModifyConnection(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageModifyConnection const* aMessage);

/**
 * A DeleteConnection request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageDeleteConnection(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageDeleteConnection const* aMessage);

/**
 * A AddComment request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageAddComment(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageAddComment const* aMessage);

/**
 * A ModifyComment request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageModifyComment(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageModifyComment const* aMessage);

/**
 * A DeleteComment request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageDeleteComment(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageDeleteComment const* aMessage);

/**
 * A AddVariable request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageAddVariable(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageAddVariable const* aMessage);

/**
 * A ModifyVariable request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageModifyVariable(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageModifyVariable const* aMessage);

/**
 * A DeleteVariable request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageDeleteVariable(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageDeleteVariable const* aMessage);

/**
 * A GetModel request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageGetModel(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A GetDrawingInstruction request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageGetDrawingInstruction(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A EnableWatch request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageEnableWatch(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A DisableWatch request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageDisableWatch(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A Force request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageForce(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageForce const* aMessage);

/**
 * A GetHardwareConfig request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageGetHardwareConfig(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A VerifyHardwareConfig request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageVerifyHardwareConfig(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageVerifyHardwareConfig const* aMessage);

/**
 * A GetHardwareIo request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageGetHardwareIo(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A GetLibrary request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageGetLibrary(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A GetErrorLog request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageGetErrorLog(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageGetErrorLog const* aMessage);

/**
 * A ClearErrorLog request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageClearErrorLog(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A GetAuditLog request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageGetAuditLog(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageGetAuditLog const* aMessage);

/**
 * A ClearAuditLog request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageClearAuditLog(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A SetPilTest request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageSetPilTest(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A ResetPilTest request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageResetPilTest(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A PreparePilTest request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessagePreparePilTest(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessagePreparePilTest const* aMessage);

/**
 * A InitPilTest request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageInitPilTest(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A SetPilTestCycleTime request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageSetPilTestCycleTime(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageSetPilTestCycleTime const* aMessage);

/**
 * A GetPilTestVarDescriptors request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageGetPilTestVarDescriptors(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageGetPilTestVarDescriptors const* aMessage);

/**
 * A ForcePilTestVariables request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageForcePilTestVariables(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageForcePilTestVariables const* aMessage);

/**
 * A WatchPilTestVariables request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageWatchPilTestVariables(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageWatchPilTestVariables const* aMessage);

/**
 * A ActivatePilTest request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageActivatePilTest(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageActivatePilTest const* aMessage);

/**
 * A PrepareCodeImageUpload request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessagePrepareCodeImageUpload(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A GetTimerFrequency request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageGetTimerFrequency(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A EnableOutput request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageEnableOutput(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A DisableOutput request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageDisableOutput(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A SetOperationMode request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageSetOperationMode(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageSetOperationMode const* aMessage);

/**
 * A GetLibraryFingerprint request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageGetLibraryFingerprint(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A SaveApmToPlc request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageSaveApmToPlc(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A GetVersion request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageGetVersion(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A ExecSingleCycle request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageExecSingleCycle(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A SetInitValue request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageSetInitValue(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageSetInitValue const* aMessage);

/**
 * A GetInitValue request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aMessage the data of the message
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageGetInitValue(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, DCM_MessageGetInitValue const* aMessage);

/**
 * A ExecBlockStep request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageExecBlockStep(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A GetExecutionOrder request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageGetExecutionOrder(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * A DownloadApplicationConfig request has been received.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessageDownloadApplicationConfig(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * Open a stream for writing data for UploadApplicationConfig.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return handle to the opened stream or NULL in case of error
 */
void* DCM_openStreamUploadApplicationConfig(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * Open a stream for writing data for UploadHardwarConfig.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @return handle to the opened stream or NULL in case of error
 */
void* DCM_openStreamUploadHardwarConfig(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest);

/**
 * Sends a Deviceinfo response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageDeviceinfo(void* aCtx, DCM_Request const* aRequest, DCM_MessageDeviceinfo const* aMessage);

/**
 * Sends a State response to request \a request.
 *
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageState(DCM_Request const* aRequest, DCM_MessageState const* aMessage);

/**
 * Sends a Added response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageAdded(void* aCtx, DCM_Request const* aRequest, DCM_MessageAdded const* aMessage);

/**
 * Sends a ModelBlock response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageModelBlock(void* aCtx, DCM_Request const* aRequest, DCM_MessageModelBlock const* aMessage);

/**
 * Sends a ModelConnection response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageModelConnection(void* aCtx, DCM_Request const* aRequest, DCM_MessageModelConnection const* aMessage);

/**
 * Sends a ModelComment response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageModelComment(void* aCtx, DCM_Request const* aRequest, DCM_MessageModelComment const* aMessage);

/**
 * Sends a ModelVariable response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageModelVariable(void* aCtx, DCM_Request const* aRequest, DCM_MessageModelVariable const* aMessage);

/**
 * Sends a DrawingInstructionEmpty response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageDrawingInstructionEmpty(void* aCtx, DCM_Request const* aRequest, DCM_MessageDrawingInstructionEmpty const* aMessage);

/**
 * Sends a DrawingInstructionBlockSimple response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageDrawingInstructionBlockSimple(void* aCtx, DCM_Request const* aRequest, DCM_MessageDrawingInstructionBlockSimple const* aMessage);

/**
 * Sends a DrawingInstructionBlockFunctionBlock response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageDrawingInstructionBlockFunctionBlock(void* aCtx, DCM_Request const* aRequest, DCM_MessageDrawingInstructionBlockFunctionBlock const* aMessage);

/**
 * Sends a DrawingInstructionPin response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageDrawingInstructionPin(void* aCtx, DCM_Request const* aRequest, DCM_MessageDrawingInstructionPin const* aMessage);

/**
 * Sends a DrawingInstructionLine response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageDrawingInstructionLine(void* aCtx, DCM_Request const* aRequest, DCM_MessageDrawingInstructionLine const* aMessage);

/**
 * Sends a DrawingInstructionComment response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageDrawingInstructionComment(void* aCtx, DCM_Request const* aRequest, DCM_MessageDrawingInstructionComment const* aMessage);

/**
 * Sends a Watch response to request \a request.
 *
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageWatch(DCM_Request const* aRequest, DCM_MessageWatch const* aMessage);

/**
 * Sends a HardwareConfig response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageHardwareConfig(void* aCtx, DCM_Request const* aRequest, DCM_MessageHardwareConfig const* aMessage);

/**
 * Sends a HardwareIo response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageHardwareIo(void* aCtx, DCM_Request const* aRequest, DCM_MessageHardwareIo const* aMessage);

/**
 * Sends a LibraryItem response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageLibraryItem(void* aCtx, DCM_Request const* aRequest, DCM_MessageLibraryItem const* aMessage);

/**
 * Sends a LibraryItemPin response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageLibraryItemPin(void* aCtx, DCM_Request const* aRequest, DCM_MessageLibraryItemPin const* aMessage);

/**
 * Sends a ErrorLog response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageErrorLog(void* aCtx, DCM_Request const* aRequest, DCM_MessageErrorLog const* aMessage);

/**
 * Sends a AuditLog response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageAuditLog(void* aCtx, DCM_Request const* aRequest, DCM_MessageAuditLog const* aMessage);

/**
 * Sends a NumPilTestSteps response to request \a request.
 *
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageNumPilTestSteps(DCM_Request const* aRequest, DCM_MessageNumPilTestSteps const* aMessage);

/**
 * Sends a PilTestVarDescriptors response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessagePilTestVarDescriptors(void* aCtx, DCM_Request const* aRequest, DCM_MessagePilTestVarDescriptors const* aMessage);

/**
 * Sends a DownloadData response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aPtr the data of the message
 * @param aLength the length of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageDownloadData(void* aCtx, DCM_Request const* aRequest, uint8_t const* aPtr, size_t aLength);

/**
 * Sends a TimerFrequency response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageTimerFrequency(void* aCtx, DCM_Request const* aRequest, DCM_MessageTimerFrequency const* aMessage);

/**
 * Sends a Verified response to request \a request.
 *
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageVerified(DCM_Request const* aRequest, DCM_MessageVerified const* aMessage);

/**
 * Sends a Released response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageReleased(void* aCtx, DCM_Request const* aRequest, DCM_MessageReleased const* aMessage);

/**
 * Sends a OperationMode response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageOperationMode(void* aCtx, DCM_Request const* aRequest, DCM_MessageOperationMode const* aMessage);

/**
 * Sends a LibraryFingerprint response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageLibraryFingerprint(void* aCtx, DCM_Request const* aRequest, DCM_MessageLibraryFingerprint const* aMessage);

/**
 * Sends a Version response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageVersion(void* aCtx, DCM_Request const* aRequest, DCM_MessageVersion const* aMessage);

/**
 * Sends a InitValue response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageInitValue(void* aCtx, DCM_Request const* aRequest, DCM_MessageInitValue const* aMessage);

/**
 * Sends a CurrentBreakpointBlock response to request \a request.
 *
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageCurrentBreakpointBlock(DCM_Request const* aRequest, DCM_MessageCurrentBreakpointBlock const* aMessage);

/**
 * Sends a ExecutionOrderEntry response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @return result of sendMessage()
 */
uint32_t DCM_sendMessageExecutionOrderEntry(void* aCtx, DCM_Request const* aRequest, DCM_MessageExecutionOrderEntry const* aMessage);

/**
 * Sends a PilTestVariables response to request \a request.
 *
 * @param aCtx context pointer
 * @param aRequest the request object passed the request handling function
 * @param aMessage the data of the message
 * @param aLength the serialized length of the varValues array, in bytes
 * @return result of DCM_sendMessage()
 */
uint32_t DCM_sendMessagePilTestVariables(void* aCtx, DCM_Request const* aRequest, DCM_MessagePilTestVariables const* aMessage, uint32_t aLength);

/**
 * Close an opened stream.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aHandle handle to the stream
 * @param aData raw content
 * @param aLength length of the raw content
 * @return error code or 0 on success
 */
uint32_t DCM_writeStream(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, void* aHandle, uint8_t const* aData, size_t aLength);

/**
 * Close an opened stream.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aRequest the request object for sending return messages
 * @param aHandle handle to the stream
 * @param aStatus 0 if the whole file was transmitted
 * @return error code or 0 on success
 */
uint32_t DCM_closeStream(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, DCM_Request const* aRequest, void* aHandle, uint32_t aStatus);

/**
 * A message has been received via a connection.
 *
 * @param aSrtsContext the sRTS context
 * @param aConnection the connection
 * @param aData raw content
 * @param aLength length of the raw content
 * @return error code or 0 on success
 */
uint32_t DCM_receiveMessage(SRTS_ContextPtr aSrtsContext, DCM_Connection* aConnection, void const* aData, size_t aLength);

/**
 * Send a message to the client.
 *
 * @param aCtx user defined context
 * @param aData message content
 * @param aLength size of the message
 */
uint32_t DCM_sendMessage(void* aCtx, void const* aData, size_t aLength);

/**
 * Send a message to the client.
 *
 * @param aData message content
 * @param aLength size of the message
 */
uint32_t DCM_sendMessageBroadcast(void const* aData, size_t aLength);

/**
 * Get the current time
 *
 * @return milliseconds since 1970-01-01
 */
uint64_t DCM_getTime(void);

/**
 * Get the binary size the given array will have in serialized form (in bytes).
 *
 * @param[in] aItem the array for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthString(DCM_String const* aItem);

/**
 * Get the binary size the given array will have in serialized form (in bytes).
 *
 * @param[in] aItem the array for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthStringArray(DCM_StringArray const* aItem);

/**
 * Get the binary size the given array will have in serialized form (in bytes).
 *
 * @param[in] aItem the array for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthInt16Array(DCM_Int16Array const* aItem);

/**
 * Get the binary size the given array will have in serialized form (in bytes).
 *
 * @param[in] aItem the array for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthVarDescArray(DCM_VarDescArray const* aItem);

/**
 * Get the binary size the given array will have in serialized form (in bytes).
 *
 * @param[in] aItem the array for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthVarValueArray(DCM_VarValueArray const* aItem);

/**
 * Get the binary size the given struct will have in serialized form (in bytes).
 *
 * @param[in] aItem the struct for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthPosition(DCM_Position const* aItem);

/**
 * Get the binary size the given struct will have in serialized form (in bytes).
 *
 * @param[in] aItem the struct for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthToken(DCM_Token const* aItem);

/**
 * Get the binary size the given struct will have in serialized form (in bytes).
 *
 * @param[in] aItem the struct for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthInterfaceBlock(DCM_InterfaceBlock const* aItem);

/**
 * Get the binary size the given struct will have in serialized form (in bytes).
 *
 * @param[in] aItem the struct for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthInterfaceConnection(DCM_InterfaceConnection const* aItem);

/**
 * Get the binary size the given struct will have in serialized form (in bytes).
 *
 * @param[in] aItem the struct for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthInterfaceComment(DCM_InterfaceComment const* aItem);

/**
 * Get the binary size the given struct will have in serialized form (in bytes).
 *
 * @param[in] aItem the struct for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthInterfaceVariable(DCM_InterfaceVariable const* aItem);

/**
 * Get the binary size the given struct will have in serialized form (in bytes).
 *
 * @param[in] aItem the struct for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthVarDesc(DCM_VarDesc const* aItem);

/**
 * Get the binary size the given struct will have in serialized form (in bytes).
 *
 * @param[in] aItem the struct for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthVarArraySegmentDesc(DCM_VarArraySegmentDesc const* aItem);

/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthStatus(DCM_MessageStatus const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthHello(DCM_MessageHello const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthLogin(DCM_MessageLogin const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthDeviceinfo(DCM_MessageDeviceinfo const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthState(DCM_MessageState const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthVerify(DCM_MessageVerify const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthRelease(DCM_MessageRelease const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthAdded(DCM_MessageAdded const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthAddBlock(DCM_MessageAddBlock const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthModifyBlock(DCM_MessageModifyBlock const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthDeleteBlock(DCM_MessageDeleteBlock const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthAddConnection(DCM_MessageAddConnection const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthModifyConnection(DCM_MessageModifyConnection const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthDeleteConnection(DCM_MessageDeleteConnection const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthAddComment(DCM_MessageAddComment const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthModifyComment(DCM_MessageModifyComment const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthDeleteComment(DCM_MessageDeleteComment const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthAddVariable(DCM_MessageAddVariable const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthModifyVariable(DCM_MessageModifyVariable const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthDeleteVariable(DCM_MessageDeleteVariable const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthModelBlock(DCM_MessageModelBlock const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthModelConnection(DCM_MessageModelConnection const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthModelComment(DCM_MessageModelComment const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthModelVariable(DCM_MessageModelVariable const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthDrawingInstructionEmpty(DCM_MessageDrawingInstructionEmpty const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthDrawingInstructionBlockSimple(DCM_MessageDrawingInstructionBlockSimple const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthDrawingInstructionBlockFunctionBlock(DCM_MessageDrawingInstructionBlockFunctionBlock const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthDrawingInstructionPin(DCM_MessageDrawingInstructionPin const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthDrawingInstructionLine(DCM_MessageDrawingInstructionLine const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthDrawingInstructionComment(DCM_MessageDrawingInstructionComment const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthWatch(DCM_MessageWatch const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthForce(DCM_MessageForce const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthHardwareConfig(DCM_MessageHardwareConfig const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthVerifyHardwareConfig(DCM_MessageVerifyHardwareConfig const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthHardwareIo(DCM_MessageHardwareIo const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthLibraryItem(DCM_MessageLibraryItem const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthLibraryItemPin(DCM_MessageLibraryItemPin const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthGetErrorLog(DCM_MessageGetErrorLog const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthErrorLog(DCM_MessageErrorLog const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthGetAuditLog(DCM_MessageGetAuditLog const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthAuditLog(DCM_MessageAuditLog const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthPreparePilTest(DCM_MessagePreparePilTest const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthNumPilTestSteps(DCM_MessageNumPilTestSteps const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthSetPilTestCycleTime(DCM_MessageSetPilTestCycleTime const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthGetPilTestVarDescriptors(DCM_MessageGetPilTestVarDescriptors const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthPilTestVarDescriptors(DCM_MessagePilTestVarDescriptors const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthWatchPilTestVariables(DCM_MessageWatchPilTestVariables const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthActivatePilTest(DCM_MessageActivatePilTest const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthTimerFrequency(DCM_MessageTimerFrequency const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthVerified(DCM_MessageVerified const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthReleased(DCM_MessageReleased const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthSetOperationMode(DCM_MessageSetOperationMode const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthOperationMode(DCM_MessageOperationMode const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthLibraryFingerprint(DCM_MessageLibraryFingerprint const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthVersion(DCM_MessageVersion const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthSetInitValue(DCM_MessageSetInitValue const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthGetInitValue(DCM_MessageGetInitValue const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthInitValue(DCM_MessageInitValue const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthCurrentBreakpointBlock(DCM_MessageCurrentBreakpointBlock const* aItem);
/**
 * Get the binary size the given message will have in serialized form (in bytes, excluding headers).
 *
 * @param[in] aItem the message for which the size is determined.
 * @return a non-negative number of bytes
 */
size_t DCM_serializedLengthExecutionOrderEntry(DCM_MessageExecutionOrderEntry const* aItem);

/*@}*//* DCM Data Control Messaging */

#endif
